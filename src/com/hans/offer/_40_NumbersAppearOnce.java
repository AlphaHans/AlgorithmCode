package com.hans.offer;

/**
 * Created by Hans on 17/2/26.
 * 题目：一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是O（n），空间复杂度是O（1）。
 * <p>
 * 思路解析:
 * 可以先想一下: 如果只有一个数字出现一次,其他数字出现两次怎么办。
 * 我们可以利用异或的特性。 如果一个数字异或自己(num^=num) 结果是抵消的。
 * 所以我们可以得出,如果一个数字出现一次的解法。
 * <p>
 * 那么回到原题,怎么做出现两次呢?
 * 1.我们试着把原数组分成两个子数组，使得每个子数组包含一个只出现一次的数字，
 * 而其他数字都成对出现两次。如果能够这样拆分成两个数组，我们就可以按照前面的办法分别找出两个只出现一次的数字了。
 * <p>
 * 2.因为其他数字都出现了两次，在异或中全部抵消了。由于这两个数字肯定不一样，那么异或的结果肯定不为0，也就是说在这个结果数字的二进制表示中至少就有一位为1。
 * <p>
 * 3.我们在结果数字中找到第一个为1的位的位置，记为第n位。现在我们以第n位是不是1为标准把原数组中的数字分成两个子数组，
 * 第一个子数组中每个数字的第n位都是1，而第二个子数组中每个数字的第n位都是0。
 * <p>
 * 4.举个例子，假设输入数组{2,4,3,6,3,2,5,5}。当我们依次对数组中的每一个数字做异或运算之后，得到的结果用二进制表示是0010。
 * 异或得到结果中的倒数第二位是1，于是我们根据数字的倒数第二位是不是1分为两个数组。第一个子数组{2,3,6,3,2}中所有数字的倒数第二位都是1，
 * 而第二个子数组{4,5,5}中所有数字的倒数第二位都是0。
 * 接下来只要分别对这两个子数组求异或，就能找出第一个子数组中只出现一次的数字是6，而第二个子数组中只出现一次的数字是4。
 */
public class _40_NumbersAppearOnce {

    public static void main(String agrs[]) {
        int data[] = {1, 2, 2, 3, 3, 4, 4, 5, 5};
        int num = data[0];
        for (int i = 1; i < data.length; i++) {
            num ^= data[i];
        }
        System.out.println(num);
    }
}
